# coding: utf-8
from flask import Flask, jsonify, request, render_template
from flask_talisman import Talisman

from app.config import config
from app.models import database
from app.management.commands_loader import CommandsLoader
from app.www.mobile.module import MobileMod


def create_app():
    app = Flask(__name__, static_folder='www/mobile/static')
    app.config.from_object(config)

    MobileMod(app)
    CommandsLoader(app)
    Talisman(app,
             content_security_policy=config.get('CONTENT_SECURITY_POLICY'),
             content_security_policy_nonce_in=['script-src'])

    # This hook ensures that a connection is opened to handle any queries
    # generated by the request.
    @app.before_request
    def _db_connect():
        if database.is_closed():
            database.connect()

    # This hook ensures that the connection is closed when we've finished
    # processing the request.
    @app.teardown_request
    def _db_close(exc):
        if not database.is_closed():
            database.close()

    @app.errorhandler(404)
    def page_not_found(e):
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return jsonify({
                'message': 'Page not found',
                'status_code': 404}), 404

        return render_template('404.html'), 404

    @app.errorhandler(403)
    def forbidden(e):
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return jsonify({
                'message': 'Access forbidden',
                'status_code': 403}), 403

        return render_template('403.html'), 403

    @app.errorhandler(423)
    def locked(e):
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return jsonify({
                'message': 'Somebody already picked up the phone',
                'status_code': 423}), 423

        return render_template('423.html'), 423

    return app
